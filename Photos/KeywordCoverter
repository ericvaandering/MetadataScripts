#! /usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import copy
import sys
import pdb, pprint

def read_keywords(input):

    """
    Translate keyword file into a nested structure with children (recursive)
    and synonyms.
    """

    keywords = {}
    keyword_stack = []
    empty_keyword = {'name' : '', 'children' : {}, 'synonyms' : [], }

    last_level = 0
    for raw_line in input:
        line = raw_line.rstrip()
        keyword = line.lstrip()
        level = len(line)-len(keyword)

        if (len(keyword) == 0) :
            continue
        if level == 0:
            keywords[keyword] = copy.deepcopy(empty_keyword)
            keywords[keyword]['name'] = keyword
            keyword_stack.append(keywords[keyword])
            last_level = level
        elif level > last_level:
            if keyword.startswith('{'):
                synonym = keyword.strip('{}')
                keyword_stack[-1]['synonyms'].append(synonym)
            else:
                keyword_stack[-1]['children'].update({keyword : copy.deepcopy(empty_keyword)})
                keyword_stack[-1]['children'][keyword]['name'] = keyword
                keyword_stack.append(keyword_stack[-1]['children'][keyword])
                last_level = level
        elif level <= last_level:
            for i in range(0, last_level-level+1):
                keyword_stack.pop()

            keyword_stack[-1]['children'].update({keyword : copy.deepcopy(empty_keyword)})
            keyword_stack[-1]['children'][keyword]['name'] = keyword

            keyword_stack.append(keyword_stack[-1]['children'][keyword])
            last_level = level

    return keywords

def write_keywords(output, keywords):
    """
    Write a nested structure with children (recursive)
    and synonyms back out into the Adobe Lightroom formatted file.
    """

    def print_keyword(keyword, depth):
        padding = '\t' * depth
        output.write(padding + keyword['name'] + '\n')
        for synonym in sorted(keyword['synonyms']):
            padding = '\t' * (depth+1)
            output.write(padding + '{' + synonym + '}\n')

        for child in sorted(keyword['children'].iterkeys()):
            print_keyword(keyword['children'][child], depth + 1)

    for keyword in sorted(keywords.iterkeys()):
        print_keyword(keywords[keyword], 0)

def traverse_keywords(keywords, function, level=0):
    for keyword in keywords:
        function(keywords[keyword], level)
        traverse_keywords(keywords[keyword]['children'], function, level+1)

    return

def lower_name(keyword, level):
    keyword['name'] = keyword['name'].lower()

def lower_with_children(keyword, level):
    if keyword['children']:
        keyword['name'] = keyword['name'].lower()

def capitalize_name(keyword, level):
    if keyword['name'] == keyword['name'].upper() or keyword['name'] == keyword['name'].lower():
        keyword['name'] = keyword['name'].capitalize()

    synonyms = []
    for s in keyword['synonyms']:
        if s==s.upper() or s==s.lower():
            synonyms.append(s.capitalize())
        else:
            synonyms.append(s)
    keyword['synonyms'][:] = synonyms

def strip_special(keyword, level):
    keyword['name'] = keyword['name'].lstrip('[')
    keyword['name'] = keyword['name'].rstrip(']')
    keyword['name'] = keyword['name'].strip('#')
    keyword['name'] = keyword['name'].strip()


if __name__ == "__main__":

    """
    Convert keywords to/from Lightroom Keyword Project format from/to my format
    """

    parser = argparse.ArgumentParser(description='Convert keywords between Lightroom Keyword Project format and other formats')
    parser.add_argument('input_file')
    parser.add_argument('output_file')
    parser.add_argument('-l', '--lower',dest='lower',action='store_true', help='Make all keywords lower case')
    parser.add_argument('-L', '--lower-parent',dest='lower_parent',action='store_true', help='Make keywords with children lower case')
    parser.add_argument('-c', '--capitalize',dest='capitalize',action='store_true', help='Capitalize all upper or all lower case keywords')
    parser.add_argument('-s', '--strip',dest='strip',action='store_true', help='Strip [# #] from Lightroom Project')
#    parser.add_argument('-r', '--repo', help='Github repository name')

    parser.set_defaults(lower=False)
    parser.set_defaults(lower_parent=False)
    parser.set_defaults(capitalize=False)
    parser.set_defaults(strip=False)

    args = parser.parse_args()

    lower = vars(args)['lower']
    lower_parent = vars(args)['lower_parent']
    capitalize = vars(args)['capitalize']
    strip = vars(args)['strip']

    input_file = vars(args)['input_file']
    output_file = vars(args)['output_file']

    input = open(input_file, 'r')
    output = open(output_file, 'w')

    keywords = read_keywords(input)

    if strip:
        traverse_keywords(keywords, strip_special)
    if lower:
        traverse_keywords(keywords, lower_name)
    if lower_parent:
        traverse_keywords(keywords, lower_with_children)
    if capitalize:
        traverse_keywords(keywords, capitalize_name)

    write_keywords(output, keywords)



