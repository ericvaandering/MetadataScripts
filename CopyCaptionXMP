#! /usr/bin/env python 
# -*- coding: utf-8 -*-

import commands
import copy
import os
import sys

from lxml import objectify
from lxml import etree

xmpName = sys.argv[1]
bakName = xmpName + '.bak'

msg = xmpName + ': '

if not os.path.exists(xmpName):
    msg += " XMP file does not exist."
    sys.exit()

def xmlSearch(element, searchTree, position):
    """
    Recusive search to find an elements in the searchTree
    """
    myString = None
    searchEl = searchTree[position]
    for el in element.iterchildren():
        if el.tag == searchEl:
            if position+1 == len(searchTree):
                myString = str(el)
            else:
                myString = xmlSearch(el, searchTree, position+1)
            
            if myString:
                return myString

    return myString
    

def xmlSet(element, searchTree, position, value):
    """
    Recusive search to find and set elements in the searchTree
    """
    
    hasSet = False
    searchEl = searchTree[position]
    for el in element.iterchildren():
        if el.tag == searchEl:
            if position+1 == len(searchTree):
                el._setText(value)
                hasSet = True
            else:
                hasSet = xmlSet(el, searchTree, position+1, value)
            
            if hasSet:
                return hasSet

    return hasSet

captionTree = ["{http://www.w3.org/1999/02/22-rdf-syntax-ns#}RDF",
               "{http://www.w3.org/1999/02/22-rdf-syntax-ns#}Description",
               "{http://purl.org/dc/elements/1.1/}description",
               "{http://www.w3.org/1999/02/22-rdf-syntax-ns#}Alt",
               "{http://www.w3.org/1999/02/22-rdf-syntax-ns#}li"
              ]
titleTree = ["{http://www.w3.org/1999/02/22-rdf-syntax-ns#}RDF",
               "{http://www.w3.org/1999/02/22-rdf-syntax-ns#}Description",
               "{http://purl.org/dc/elements/1.1/}title",
               "{http://www.w3.org/1999/02/22-rdf-syntax-ns#}Alt",
               "{http://www.w3.org/1999/02/22-rdf-syntax-ns#}li"
              ]

lrFile = open(xmpName)   
lrTree = objectify.parse(lrFile)
lrRoot = lrTree.getroot()

caption = xmlSearch(lrRoot, captionTree, 0)
title = xmlSearch(lrRoot, titleTree, 0)

didSet = False
if caption and title == 'xyzzy':
    if len(caption) > 50: 
        msg +=  'too long %s' % caption
    else:
        didSet = xmlSet(lrRoot, titleTree, 0, caption)
    if didSet:
        
        status,output = commands.getstatusoutput('cp %s %s' % (xmpName, bakName))
        if status:
            sys.exit()

        newXmp = open(xmpName, 'w')
        newXmp.write(etree.tostring(lrRoot, pretty_print=True))
        newXmp.close()
        msg += 'set to   %s' % (caption)
elif not caption:
    msg += 'no caption set'
else:
    msg += 'already  %s' % title
    
print msg
sys.exit()

import pdb
pdb.set_trace()
try:
    
        import pdb
        #pdb.set_trace()
        print "Look for ", tag
        print [ el.tag for el in element.iterchildren()]

        
        element = getattr(element,tag)
        caption = str(element)
except AttributeError:
    caption = None
   
msg += " %s" % caption   
    
sys.exit()

#try:
    #element = dkRoot
    #for tag in keywordTree:
        #element = getattr(element,tag)
    #keywords = [x for x in element.li]
    #nKeywords = len(keywords)
#except AttributeError:
    #keywords = None
    #nKeywords = 0

#try:
    #element = dkRoot
    #for tag in ratingTree:
        #element = getattr(element,tag)
    #rating = element.get("{http://ns.adobe.com/xap/1.0/}Rating")
#except AttributeError:
    #rating = None

setRating = 0
setSubject = False
setKeywords = 0

try:
    element = lrRoot
    element = getattr(element,"{http://www.w3.org/1999/02/22-rdf-syntax-ns#}RDF")
    Descriptions = element.getchildren()  
    for test in Descriptions:  
        #if rating:
            #if hasattr(test,"{http://ns.adobe.com/xap/1.0/}Rating"):
                #test['{http://ns.adobe.com/xap/1.0/}Rating']._setText(str(rating))
                #setRating = rating
        if subject:
            if hasattr(test,"{http://purl.org/dc/elements/1.1/}description"):
                Description = getattr(test,"{http://purl.org/dc/elements/1.1/}description")
                Alt = getattr(Description,"{http://www.w3.org/1999/02/22-rdf-syntax-ns#}Alt")
                Alt.li._setText(subject)
                setSubject = True
        #if keywords:  
            #keywordList = []
            #hierarchyList = []
            #for keyword in keywords:
                #kws = str(keyword).split('/')
                #hierarchyList.append('|'.join(kws))
                #for kw in kws:
                    #keywordList.append(kw)
            #if hasattr(test,"{http://purl.org/dc/elements/1.1/}subject"):
                #Subject = getattr(test,"{http://purl.org/dc/elements/1.1/}subject")
                #Bag = getattr(Subject,"{http://www.w3.org/1999/02/22-rdf-syntax-ns#}Bag")
                #liTemplate = Bag.li[0]
                #nTags = len(Bag.li)
                #neededTags = len(keywordList)
                
                #for i in range (0,neededTags-nTags+1):
                    #liElement = copy.deepcopy(liTemplate)
                    #Bag.append(liElement)

                #index = 0
                #for keyword in keywordList:
                    #Bag.li[index]._setText(keyword)
                    #index += 1
                #del Bag.li[-1]
                #setKeywords = neededTags
            #if hasattr(test,"{http://ns.adobe.com/lightroom/1.0/}hierarchicalSubject"):
                #Subject = getattr(test,"{http://ns.adobe.com/lightroom/1.0/}hierarchicalSubject")
                #Bag = getattr(Subject,"{http://www.w3.org/1999/02/22-rdf-syntax-ns#}Bag")
                #liTemplate = Bag.li[0]
                #nTags = len(Bag.li)
                #neededTags = len(hierarchyList)
                
                #for i in range (0,neededTags-nTags+1):
                    #liElement = copy.deepcopy(liTemplate)
                    #Bag.append(liElement)

                #index = 0
                #for keyword in hierarchyList:
                    #Bag.li[index]._setText(keyword)
                    #index += 1
                #del Bag.li[-1]

except AttributeError:
    Description = None

msg += 'S:'
if subject:
    msg += 'T/'
else:
    msg += 'F/'
    
if setSubject:
    msg += 'T  '
else:
    msg += 'F  '

msg += "R:%s/%s  " % (rating, setRating)
msg += "K:%s/%s  " % (nKeywords, setKeywords)

print msg

newXmp = open(xmpName,'w')
newXmp.write(etree.tostring(lrRoot, pretty_print=True))
newXmp.close()

status,output = commands.getstatusoutput('rm tmpConvert.*')

